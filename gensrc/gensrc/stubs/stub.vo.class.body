    const char* %(functionName)s::mPropertyNames[] = {
        // The two values below are not desired in the return value of ohObjectPropertyNames().
        // For now we just comment them out as this seems not to break anything.
        //"ClassName",
        //"ObjectId"%(propertyDeclaration)s
    };

    std::set<std::string> %(functionName)s::mSystemPropertyNames(
        mPropertyNames, mPropertyNames + sizeof(mPropertyNames) / sizeof(const char*));

    const std::set<std::string>& %(functionName)s::getSystemPropertyNames() const {
        return mSystemPropertyNames;
    }

    std::vector<std::string> %(functionName)s::getPropertyNamesVector() const {
        std::vector<std::string> ret(
            mPropertyNames, mPropertyNames + sizeof(mPropertyNames) / sizeof(const char*));
        for (std::map<std::string, ObjectHandler::property_t>::const_iterator i = userProperties.begin();
            i != userProperties.end(); ++i)
            ret.push_back(i->first);
        return ret;
    }

    ObjectHandler::property_t %(functionName)s::getSystemProperty(const std::string& name) const {
        std::string nameUpper = boost::algorithm::to_upper_copy(name);
        if(strcmp(nameUpper.c_str(), "OBJECTID")==0)
            return objectId_;
        else if(strcmp(nameUpper.c_str(), "CLASSNAME")==0)
            return className_;
%(propertyGet)s        else
            OH_FAIL("Error: attempt to retrieve non-existent Property: '" + name + "'");
    }

    void %(functionName)s::setSystemProperty(const std::string& name, const ObjectHandler::property_t& value) {
        std::string nameUpper = boost::algorithm::to_upper_copy(name);
        if(strcmp(nameUpper.c_str(), "OBJECTID")==0)
            objectId_ = boost::get<std::string>(value);
        else if(strcmp(nameUpper.c_str(), "CLASSNAME")==0)
            className_ = boost::get<std::string>(value);
%(propertySet)s        else
            OH_FAIL("Error: attempt to set non-existent Property: '" + name + "'");
    }

    %(functionName)s::%(functionName)s(%(constructorParList)s) :
        ObjectHandler::ValueObject(ObjectId, "%(functionName)s", Permanent)%(constructorInit)s {
                  
%(populateObjectIDs)s
            
    }

