
"""
 Copyright (C) 2005, 2006, 2007 Eric Ehlers
 Copyright (C) 2005 Plamen Neykov
 Copyright (C) 2005 Aurelien Chanudet

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
"""

"""Class to encapsulate data and behavior 
required to generate addin source code."""

from gensrc.utilities import common
from gensrc.rules import rule
from gensrc.serialization import serializable
from gensrc.serialization import xmlreader
from gensrc.utilities import buffer
from gensrc.configuration import environment
import os

class Addin(serializable.Serializable):
    """Class to encapsulate data and behavior 
    required to generate addin source code."""

    #############################################
    # class variables
    #############################################

    objectIdSuffix_ = ''
    # The next two values are required for autogeneration of constructors
    # and may be overridden for certain platforms
    repositoryClass_ = 'Repository'
    overwriteVariable_ = 'Overwrite'

    #############################################
    # public interface
    #############################################

    def objectIdSuffix(self):
        """Return the text which is appended to variable names
        in autogenerated source code after object IDs are converted
        to the corresponding objects."""
        return self.objectIdSuffix_

    def bufferLoop(self):
        """Return the buffer of code for loop functions."""
        return self.bufferLoop_

    def unchanged(self):
        """Return a count of the source code files for this addin
        which are unchanged for this execution of gensrc."""
        return self.unchanged_

    def updated(self):
        """Return a count of the source code files for this addin
        which are updated for this execution of gensrc."""
        return self.updated_

    def created(self):
        """Return a count of the source code files for this addin
        which are created for this execution of gensrc."""
        return self.created_

    def incrementUnchanged(self):
        """Increment the count of unchanged source code files."""
        self.unchanged_ += 1

    def incrementUpdated(self):
        """Increment the count of updated source code files."""
        self.updated_ += 1

    def incrementCreated(self):
        """Increment the count of created source code files."""
        self.created_ += 1

    def voCall(self):
        """Return the RuleGroup object named voCall which was loaded
        from the XML rule metadata for this addin."""
        return self.voCall_

    def libraryCall(self):
        """Return the RuleGroup object named libraryCall which was loaded
        from the XML rule metadata for this addin."""
        return self.libraryCall_

    def libraryReturnType(self):
        """Return the RuleGroup object named libraryReturnType which was loaded
        from the XML rule metadata for this addin."""
        return self.libraryReturnType_

    def loopInputs(self):
        """Return the RuleGroup object named loopInputs which was loaded
        from the XML rule metadata for this addin."""
        return self.loopInputs_

    def loopReturnType(self):
        """Return the RuleGroup object named loopReturnType which was loaded
        from the XML rule metadata for this addin."""
        return self.loopReturnType_

    def idStrip(self, parameterList):
        """Return the RuleGroup object named idStrip which was loaded
        from the XML rule metadata for this addin.

        On platforms where this function is required, it must be overloaded in
        derived classes."""
        return ""

    def relativePath(self):
        """Return the subdirectory to which source code for this addin is
        written, relative to the root directory of the application."""
        return self.relativePath_

    def repositoryClass(self):
        """Return the name of the ObjectHandler Repository class, e.g.
        'RepositoryXL' on the Excel platform, otherwise 'Repository'."""
        return self.repositoryClass_

    def overwriteVariable(self):
        """Return the name of the variable which indicates whether a new
        object should overwrite an existing one.

        Presently this variable is called 'Overwrite' on the Excel platform
        and is not defined elsewhere."""
        return self.overwriteVariable_

    #############################################
    # serializer interface
    #############################################

    def serialize(self, serializer):
        """Load/unload class state to/from serializer object."""
        serializer.serializeAttribute(self, common.NAME)
        serializer.serializeProperty(self, common.ROOT_DIRECTORY)
        serializer.serializeObjectPropertyDict(self, buffer.Buffer)
        serializer.serializeProperty(self, common.COPYRIGHT)
        serializer.serializeBoolean(self, 'loadRules', True)
        serializer.serializeProperty(self, 'namespaceAddin')
        serializer.serializeProperty(self, 'relativePath')
        serializer.serializeBoolean(self, 'coreCategories')
        serializer.serializeBoolean(self, 'addinCategories')

    def postSerialize(self):
        """Perform post serialization initialization."""

        if self.loadRules_:
            serializer = xmlreader.XmlReader('metadata/rules/' + self.name_.lower())
            serializer.serializeObjectPropertyDict(self, rule.RuleGroup)

        self.rootPath_ = environment.Environment.instance().addinRootPath() + self.rootDirectory_
        self.rootPath_ = os.path.abspath(self.rootPath_) + '/'
        if not os.path.exists(self.rootPath_): 
            os.makedirs(self.rootPath_)

    #############################################
    # private member functions
    #############################################

    def __init__(self):
        """Initialize the Addin object."""
        # count of files generated by this Addin
        self.unchanged_ = 0
        self.updated_ = 0
        self.created_ = 0

