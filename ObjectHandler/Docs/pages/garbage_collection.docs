
/*
 Copyright (C) 2005, 2006, 2007, 2010 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at <http://quantlib.org/license.shtml>
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! 

\page garbage_collection Garbage Collection

<div align="center"><small><a href="manual.html">back to reference manual index</a></small></div> 

\section gc_overview Overview

The Excel implementation of %ObjectHandler supports function
\ref ohRepositoryCollectGarbage which can be called to cull objects that have been
orphaned in the repository by events such as the closing of a workbook.

A cell formula invokes the constructor of an object, causing that object to be
added to the repository.  The object is assigned an ID which is returned to the
calling cell, allowing the object to be accessed, e.g. the ID of one object
could be passed as an input to the constructor of another.

An object persists in the repository even after the formula which instantiated
the object is deleted - this happens, for example, when a workbook is closed.
The object is not lost, its ID can still be retrieved and used to access the
object.

However the object is likely redundant and a mechanism for cleaning it up is
desirable.  Function \ref ohRepositoryCollectGarbage iterates through all the
objects in the repository and culls those objects which have been orphaned by
the deletion of the calling cell.

\section gc_diagnostics Diagnostics

\li \ref ohObjectCallerAddress may be called on an object ID to retrieve the
address of the cell in which the object was instantiated.  If this address
comes back as a \#REF it indicates that the object is orphaned and will be
culled next time  \ref ohRepositoryCollectGarbage is called.
\li \ref ohRepositoryLogAllObjects dumps the complete contents of the %ObjectHandler
repository to the log file, this is followed by a summary of all of the
references maintained by %ObjectHandler in support of garbage collection.

\section gc_acknowledgements Acknowledgements

%ObjectHandler's garbage collection functionality is an implementation of a
technique presented in 
<a href="http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0470027975.html">
Excel Add-in Development in C/C++: Applications in Finance</a> by Steve Dalton.

*/

